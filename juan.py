# -*- coding: utf-8 -*-
"""JUAN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TEzyxoeW_kdHNt3V4hfZma4t5uoXIDrT
"""

import pandas as pd
import os

# --- Configuração do Caminho ---
# Defina o caminho base onde seus arquivos CSV estão localizados
base_path = r'/content'

# --- Mapeamento de Arquivos e Configurações ---
# Dicionário para mapear nomes descritivos para nomes de arquivos e configurações
file_configs = {
    'Producao Total': {'filename': 'Producao.csv', 'sep': ';', 'id_vars': ['id', 'control', 'produto'], 'type': 'simple'},
    'Processamento Viniferas Total': {'filename': 'Processamento - Viniferas.csv', 'sep': ';', 'id_vars': ['id', 'control', 'cultivar'], 'type': 'simple'},
    'Processamento Americanas Total': {'filename': 'Processamento - Americanas e Hibridas.csv', 'sep': ';', 'id_vars': ['id', 'control', 'cultivar'], 'type': 'simple'},
    'Imp Uvas Passas Total Vol': {'filename': 'Importacao - Passas.csv', 'sep': '\t', 'id_vars': ['Id', 'País'], 'type': 'vol_value'},
    'Imp Uvas Frescas Total Vol': {'filename': 'Importacao - Frescas.csv', 'sep': '\t', 'id_vars': ['Id', 'País'], 'type': 'vol_value'},
    'Imp Vinhos Mesa Total Vol': {'filename': 'Importacao - Vinhos de Mesa.csv', 'sep': '\t', 'id_vars': ['Id', 'País'], 'type': 'vol_value'},
    'Exp Espumante Total Vol': {'filename': 'Exportacao - Espumante.csv', 'sep': '\t', 'id_vars': ['Id', 'País'], 'type': 'vol_value'},
    'Exp Uvas Frescas Total Vol': {'filename': 'Exportacao - Uvas Frescas.csv', 'sep': '\t', 'id_vars': ['Id', 'País'], 'type': 'vol_value'},
    'Exp Suco Uva Total Vol': {'filename': 'Exportacao - Suco de Uva.csv', 'sep': '\t', 'id_vars': ['Id', 'País'], 'type': 'vol_value'}
}

# --- Funções de Carregamento e Agregação ---

def load_and_agg_simple(filepath, agg_name, id_vars, separator):
    """Carrega e agrega arquivos CSV simples (separador único, volume por ano)."""
    try:
        df = pd.read_csv(filepath, sep=separator)
        # Identifica colunas de ano (assumindo que são as que não estão em id_vars)
        year_cols = [col for col in df.columns if col not in id_vars]
        df_melted = df.melt(id_vars=id_vars, value_vars=year_cols, var_name='Year', value_name='Volume')

        # Converte 'Year' para numérico e 'Volume' para numérico, tratando erros e NaNs
        df_melted['Year'] = pd.to_numeric(df_melted['Year'], errors='coerce')
        df_melted['Volume'] = pd.to_numeric(df_melted['Volume'], errors='coerce').fillna(0)

        # Agrega por ano
        agg_data = df_melted.groupby('Year')['Volume'].sum().rename(agg_name)
        print(f"Sucesso ao processar {os.path.basename(filepath)}")
        return agg_data
    except FileNotFoundError:
        print(f"Erro: Arquivo não encontrado em {filepath}")
        return None
    except Exception as e:
        print(f"Erro ao processar {os.path.basename(filepath)}: {e}")
        return None

def load_and_agg_tab_vol_value(filepath, agg_name, id_vars, separator):
    """Carrega e agrega arquivos CSV com pares Volume/Valor por ano (separador tab)."""
    try:
        df = pd.read_csv(filepath, sep=separator)

        # Identifica as colunas de Volume (ignorando as colunas iniciais id_vars)
        # Assumimos que após id_vars, as colunas se alternam entre Volume e Valor (Volume na posição 0, 2, 4, etc.)
        year_cols = df.columns[len(id_vars):]
        volume_cols_names = [col for i, col in enumerate(year_cols) if i % 2 == 0]
        volume_cols_full_names = [df.columns[len(id_vars) + i*2] for i in range(len(volume_cols_names))]

        # Cria um novo dataframe apenas com id_vars e as colunas de Volume
        df_volume = df[id_vars + volume_cols_full_names].copy()

        # Renomeia as colunas de volume para apenas o ano (ex: '1970', '1971')
        # Remove a parte ".1" ou ".2" se existir, e garante que seja apenas o ano
        new_year_names = [col.split('.')[0] for col in volume_cols_full_names]
        df_volume.columns = id_vars + new_year_names

        # Derrete o dataframe
        df_melted = df_volume.melt(id_vars=id_vars, var_name='Year', value_name='Volume')

        # Converte 'Year' para numérico e 'Volume' para numérico, tratando erros ('nd', '*', '+') e NaNs
        df_melted['Year'] = pd.to_numeric(df_melted['Year'], errors='coerce')
        df_melted['Volume'] = pd.to_numeric(df_melted['Volume'], errors='coerce').fillna(0) # Converte não-numéricos (incluindo '*', 'nd', '+') para NaN e depois para 0

        # Agrega por ano
        agg_data = df_melted.groupby('Year')['Volume'].sum().rename(agg_name)
        print(f"Sucesso ao processar {os.path.basename(filepath)}")
        return agg_data
    except FileNotFoundError:
        print(f"Erro: Arquivo não encontrado em {filepath}")
        return None
    except Exception as e:
        print(f"Erro ao processar {os.path.basename(filepath)}: {e}")
        return None


# --- Processamento Principal ---
aggregated_data = {}

print(f"Iniciando processamento dos arquivos em: {base_path}\n")

for agg_name, config in file_configs.items():
    filename = config['filename']
    separator = config['sep']
    id_vars = config['id_vars']
    file_type = config['type']
    filepath = os.path.join(base_path, filename)

    if file_type == 'simple':
        agg_series = load_and_agg_simple(filepath, agg_name, id_vars, separator)
    elif file_type == 'vol_value':
        agg_series = load_and_agg_tab_vol_value(filepath, agg_name, id_vars, separator)
    else:
        print(f"Tipo de arquivo desconhecido para {filename}: {file_type}")
        continue # Pula para o próximo arquivo

    if agg_series is not None:
        aggregated_data[agg_name] = agg_series

# --- Combinar Dados Agregados ---
# Cria uma lista com todas as séries agregadas que foram carregadas com sucesso
list_of_series = [series for series in aggregated_data.values()]

if not list_of_series:
    print("\nNenhum arquivo foi processado com sucesso. Não é possível calcular a correlação.")
else:
    # Concatena as séries em um único DataFrame
    combined_df = pd.concat(list_of_series, axis=1)

    # Ordena o DataFrame pelo índice (Ano)
    combined_df = combined_df.sort_index()

    # Remove anos onde todos os valores são 0 (opcional, limpa anos sem dados relevantes)
    # combined_df = combined_df.loc[(combined_df != 0).any(axis=1)]

    print("\n--- Dados Agregados por Ano (Volume Total) ---")
    print(combined_df.head()) # Mostra as primeiras linhas
    print("...")
    print(combined_df.tail()) # Mostra as últimas linhas

    # --- Calcular Correlação ---
    print("\n--- Matriz de Correlação (Volumes Totais Anuais) ---")
    correlation_matrix = combined_df.corr()
    print(correlation_matrix)

    print("\nProcessamento concluído.")







pip install matplotlib seaborn

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd # Já deve estar carregado, mas por garantia

# --- Pressupondo que 'combined_df' e 'correlation_matrix' estão disponíveis ---
# Se você reiniciou o ambiente Python, precisará rodar o código anterior primeiro
# para carregar e processar os dados nos dataframes 'combined_df' e 'correlation_matrix'.
# Para este código, vamos assumir que eles existem na memória.


# --- 1. Visualizar Tendências de Volume ao Longo do Tempo ---

print("\nCriando gráfico de tendências de volume...")

plt.figure(figsize=(14, 8)) # Define o tamanho da figura para melhor visualização

# Usa seaborn para plotar as linhas. Cada coluna de combined_df será uma linha.
# O índice (Anos) será o eixo X automaticamente.
sns.lineplot(data=combined_df)

plt.title('Tendência Anual do Volume Total por Categoria') # Título do gráfico
plt.xlabel('Ano') # Rótulo do eixo X
plt.ylabel('Volume Total') # Rótulo do eixo Y
plt.grid(True, linestyle='--', alpha=0.6) # Adiciona um grid leve
plt.legend(title='Categoria', bbox_to_anchor=(1.05, 1), loc='upper left') # Legenda fora do gráfico
plt.tight_layout() # Ajusta o layout para evitar cortar elementos
plt.show() # Mostra o gráfico

# Observação sobre o gráfico de tendências:
# Como as escalas de volume são muito diferentes entre as categorias (por exemplo,
# Produção Total vs. Imp Uvas Passas Total Vol), o gráfico pode ficar dominado
# pelas categorias de maior volume, tornando as categorias de menor volume
# difíceis de visualizar. Podemos criar gráficos separados ou usar uma escala logarítmica
# se precisarmos analisar as tendências relativas das categorias menores.

# Exemplo Opcional: Plotar em escala logarítmica (descomente para testar)
# print("\nCriando gráfico de tendências de volume (Escala Logarítmica)...")
# plt.figure(figsize=(14, 8))
# sns.lineplot(data=combined_df)
# plt.title('Tendência Anual do Volume Total por Categoria (Escala Logarítmica)')
# plt.xlabel('Ano')
# plt.ylabel('Volume Total (Escala Logarítmica)')
# plt.yscale('log') # Define a escala do eixo Y como logarítmica
# plt.grid(True, linestyle='--', alpha=0.6)
# plt.legend(title='Categoria', bbox_to_anchor=(1.05, 1), loc='upper left')
# plt.tight_layout()
# plt.show()


# --- 2. Visualizar a Matriz de Correlação como Heatmap ---

#print("\nCriando heatmap da matriz de correlação...")

plt.figure(figsize=(10, 8)) # Define o tamanho da figura para melhor visualização

# Cria o heatmap
#sns.heatmap(correlation_matrix,
           # annot=True,      # Exibe os valores de correlação nas células
           # cmap='coolwarm', # Define o esquema de cores (ex: azul para negativo, vermelho para positivo)
           # fmt='.2f',       # Formata os números com 2 casas decimais
            #linewidths=.5)   # Adiciona linhas entre as células

#plt.title('Matriz de Correlação dos Volumes Totais Anuais por Categoria') # Título do gráfico
#plt.show() # Mostra o gráfico

#print("\nVisualizações criadas.")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
import re # Import regex for cleaner year extraction

# --- Configuração do Caminho ---
base_path = r'/content'

# --- Mapeamento de Arquivos e Configurações ---
file_configs = {
    'Producao Total': {'filename': 'Producao.csv', 'sep': ';', 'id_vars': ['id', 'control', 'produto'], 'type': 'simple'},
    'Processamento Viniferas Total': {'filename': 'Processamento - Viniferas.csv', 'sep': ';', 'id_vars': ['id', 'control', 'cultivar'], 'type': 'simple'},
    'Processamento Americanas Total': {'filename': 'Processamento - Americanas e Hibridas.csv', 'sep': ';', 'id_vars': ['id', 'control', 'cultivar'], 'type': 'simple'},
    'Imp Uvas Passas Total Vol': {'filename': 'Importacao - Passas.csv', 'sep': '\t', 'id_vars': ['Id', 'País'], 'type': 'vol_value'},
    'Imp Uvas Frescas Total Vol': {'filename': 'Importacao - Frescas.csv', 'sep': '\t', 'id_vars': ['Id', 'País'], 'type': 'vol_value'},
    'Imp Vinhos Mesa Total Vol': {'filename': 'Importacao - Vinhos de Mesa.csv', 'sep': '\t', 'id_vars': ['Id', 'País'], 'type': 'vol_value'},
    'Exp Espumante Total Vol': {'filename': 'Exportacao - Espumante.csv', 'sep': '\t', 'id_vars': ['Id', 'País'], 'type': 'vol_value'},
    'Exp Uvas Frescas Total Vol': {'filename': 'Exportacao - Uvas Frescas.csv', 'sep': '\t', 'id_vars': ['Id', 'País'], 'type': 'vol_value'},
    'Exp Suco Uva Total Vol': {'filename': 'Exportacao - Suco de Uva.csv', 'sep': '\t', 'id_vars': ['Id', 'País'], 'type': 'vol_value'},
    'Comercializacao Total': {'filename': 'Comercializacao.csv', 'sep': ';', 'id_vars': ['id', 'control', 'Produto'], 'type': 'simple'}, # Added Comercializacao
}

# --- Função para Carregar, Filtrar e Agregar Dados para os Últimos N Anos ---

def process_and_plot_last_n_years(filepath, agg_name, id_vars, separator, file_type, n_years=15):
    """
    Carrega, filtra para os últimos n anos, agrega e plota dados de volume de um arquivo CSV.
    """
    print(f"\nProcessando e plotando: {agg_name} ({os.path.basename(filepath)})...")
    try:
        df = pd.read_csv(filepath, sep=separator)

        # 1. Identificar colunas de ano
        data_cols = [col for col in df.columns if col not in id_vars]

        # 2. Extrair anos e encontrar o último ano
        # Usa regex para encontrar números de 4 dígitos que parecem anos no início do nome da coluna
        year_numbers = []
        year_col_map = {} # Map original col name to just the year number (as int)
        for col in data_cols:
             # Find 4 digits at the start of the column name
            match = re.match(r'^\d{4}', col)
            if match:
                try:
                    year = int(match.group(0))
                    year_numbers.append(year)
                    year_col_map[col] = year
                except ValueError:
                    # Should not happen if regex matched digits, but good practice
                    pass

        if not year_numbers:
            print(f"Aviso: Nenhuma coluna de ano encontrada em {os.path.basename(filepath)}. Pulando.")
            return

        latest_year = max(year_numbers)
        start_year = latest_year - (n_years - 1)

        # 3. Filtrar colunas para os últimos n anos e selecionar apenas Volume se for tipo 'vol_value'
        cols_to_melt = []
        if file_type == 'simple':
            # Para tipo simples, apenas selecione as colunas cujo ano está no intervalo
            for col in data_cols:
                if col in year_col_map and year_col_map[col] >= start_year:
                     cols_to_melt.append(col)
            if not cols_to_melt:
                 print(f"Aviso: Nenhuma coluna de dado encontrada no intervalo dos últimos {n_years} anos em {os.path.basename(filepath)}. Pulando.")
                 return
            df_filtered = df[id_vars + cols_to_melt].copy()
            # Renomear colunas de ano para apenas o ano para o melt consistente
            rename_map = {col: str(year_col_map[col]) for col in cols_to_melt}
            df_filtered.rename(columns=rename_map, inplace=True)


        elif file_type == 'vol_value':
            # Para tipo vol_value, selecione pares de colunas onde a coluna Volume está no intervalo
            volume_cols_in_range = []
            for i in range(0, len(data_cols), 2): # Itera pelos índices das colunas de Volume (0, 2, 4, ...)
                vol_col_name = data_cols[i]
                if vol_col_name in year_col_map and year_col_map[vol_col_name] >= start_year:
                     volume_cols_in_range.append(vol_col_name)
                     # Incluir a coluna de valor correspondente, se existir
                     if i + 1 < len(data_cols):
                         cols_to_melt.append(vol_col_name) # Adiciona a coluna de Volume
                         # Não adicionamos a coluna de Valor para o melt que agrega VOLUME
                         # cols_to_melt.append(data_cols[i+1]) # Adiciona a coluna de Valor

            if not volume_cols_in_range:
                 print(f"Aviso: Nenhuma coluna de volume encontrada no intervalo dos últimos {n_years} anos em {os.path.basename(filepath)}. Pulando.")
                 return

            # Crie um novo dataframe contendo apenas as colunas de ID e as colunas de volume filtradas
            df_filtered = df[id_vars + volume_cols_in_range].copy()

            # Renomeia as colunas de volume filtradas para apenas o ano
            rename_map = {col: str(year_col_map[col]) for col in volume_cols_in_range}
            df_filtered.rename(columns=rename_map, inplace=True)
            cols_to_melt = list(rename_map.values()) # Atualiza cols_to_melt com os novos nomes (apenas anos como string)


        # 4. Derreter o dataframe filtrado
        df_melted = df_filtered.melt(id_vars=id_vars, value_vars=cols_to_melt, var_name='Year', value_name='Volume')

        # 5. Converter colunas para numérico e agregar
        df_melted['Year'] = pd.to_numeric(df_melted['Year'], errors='coerce')
        # Converte Volume, tratando valores como 'nd', '*', '+', NaN para 0
        df_melted['Volume'] = pd.to_numeric(df_melted['Volume'], errors='coerce').fillna(0)

        # Agrega por ano para obter o total para os últimos n anos
        agg_data = df_melted.groupby('Year')['Volume'].sum().rename(agg_name)

        # Remove anos que não são números válidos (deve ser mínimo se os anos foram bem identificados)
        agg_data = agg_data.loc[agg_data.index.dropna()]

        # Filtra novamente para garantir que apenas anos >= start_year estejam presentes (útil se houver anos não numéricos que viraram NaN e foram preenchidos antes do agrupamento)
        agg_data = agg_data.loc[agg_data.index >= start_year]

        if agg_data.empty:
             print(f"Aviso: DataFrame agregado vazio para os últimos {n_years} anos em {os.path.basename(filepath)}. Pulando a plotagem.")
             return


        # 6. Plotar o gráfico
        plt.figure(figsize=(10, 6))
        sns.lineplot(data=agg_data) # Plotagem direta da série agregada

        plt.title(f'Volume Total Anual para {agg_name} (Últimos {n_years} Anos)')
        plt.xlabel('Ano')
        plt.ylabel('Volume Total')
        plt.grid(True, linestyle='--', alpha=0.6)
        plt.xticks(agg_data.index) # Garante que todos os anos sejam mostrados no eixo X
        plt.tight_layout()
        plt.show()

        print(f"Plotagem concluída para {agg_name}.")

    except FileNotFoundError:
        print(f"Erro: Arquivo não encontrado em {filepath}. Pulando.")
    except Exception as e:
        print(f"Erro inesperado ao processar {os.path.basename(filepath)}: {e}. Pulando.")


# --- Executar Plotagem para Cada Arquivo ---

print(f"Iniciando plotagem individual dos arquivos em: {base_path}")

for agg_name, config in file_configs.items():
    filepath = os.path.join(base_path, config['filename'])
    # Chama a função para processar, agregar e plotar para os últimos 15 anos
    process_and_plot_last_n_years(
        filepath,
        agg_name,
        config['id_vars'],
        config['sep'],
        config['type'],
        n_years=15 # Definindo para 15 anos
    )

print("\nPlotagem individual de todos os arquivos concluída.")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

# --- Configuração do Caminho e Mapeamento ---
base_path = r'/content'
file_configs = {
    'Exp Espumante Total Vol': {'filename': 'Exportacao - Espumante.csv', 'sep': '\t', 'id_vars': ['Id', 'País'], 'type': 'vol_value', 'col_index': 0}, # Volume é o 1º na dupla (índice 0)
    'Exp Espumante Total Val': {'filename': 'Exportacao - Espumante.csv', 'sep': '\t', 'id_vars': ['Id', 'País'], 'type': 'vol_value', 'col_index': 1}  # Valor é o 2º na dupla (índice 1)
}

# Função para carregar e agregar Volume ou Valor de arquivos com pares Vol/Valor
def load_and_agg_tab_selected_col(filepath, agg_name, id_vars, separator, col_index):
    """Carrega e agrega uma coluna específica (Volume ou Valor) de arquivos com pares Vol/Valor."""
    try:
        df = pd.read_csv(filepath, sep=separator)

        year_cols_pairs = df.columns[len(id_vars):]
        selected_cols_names = [year_cols_pairs[i] for i in range(len(year_cols_pairs)) if i % 2 == col_index]
        selected_cols_full_names = [df.columns[len(id_vars) + i*2 + col_index] for i in range(len(selected_cols_names))]

        df_selected = df[id_vars + selected_cols_full_names].copy()

        new_year_names = [col.split('.')[0] for col in selected_cols_full_names]
        df_selected.columns = id_vars + new_year_names

        df_melted = df_selected.melt(id_vars=id_vars, var_name='Year', value_name='Value')
        df_melted['Year'] = pd.to_numeric(df_melted['Year'], errors='coerce')
        df_melted['Value'] = pd.to_numeric(df_melted['Value'], errors='coerce').fillna(0)

        agg_data = df_melted.groupby('Year')['Value'].sum().rename(agg_name)
        print(f"Sucesso ao processar {os.path.basename(filepath)} ({agg_name})")
        return agg_data
    except FileNotFoundError:
        print(f"Erro: Arquivo não encontrado em {filepath}")
        return None
    except Exception as e:
        print(f"Erro ao processar {os.path.basename(filepath)} ({agg_name}): {e}")
        return None

# --- Processamento Principal ---
aggregated_export_data = {}

print(f"Iniciando processamento de dados de exportação de espumante em: {base_path}\n")

for agg_name, config in file_configs.items():
    filename = config['filename']
    separator = config['sep']
    id_vars = config['id_vars']
    file_type = config['type']
    col_index = config['col_index']
    filepath = os.path.join(base_path, filename)

    agg_series = load_and_agg_tab_selected_col(filepath, agg_name, id_vars, separator, col_index)

    if agg_series is not None:
        aggregated_export_data[agg_name] = agg_series

# --- Combinar e Filtrar Dados Agregados ---
list_of_export_series = [series for series in aggregated_export_data.values()]

if not list_of_export_series:
    print("\nNenhum dado de exportação de espumante processado com sucesso.")
else:
    export_combined_df = pd.concat(list_of_export_series, axis=1)
    export_combined_df = export_combined_df.sort_index()

    # Filtrar para os últimos 15 anos (ajustar se necessário com base nos dados)
    # Encontra o ano mais recente nos dados
    latest_year = export_combined_df.index.max()
    # Calcula o ano de início para 15 anos atrás
    start_year = latest_year - 14 # Inclui o último ano, totalizando 15 anos

    export_15yrs_df = export_combined_df.loc[start_year:latest_year].copy()

    # Calcular o Preço Médio por Litro
    export_15yrs_df['Preco Medio por Litro'] = export_15yrs_df['Exp Espumante Total Val'] / export_15yrs_df['Exp Espumante Total Vol']

    print(f"\n--- Dados Agregados de Exportação de Espumante ({start_year}-{latest_year}) ---")
    print(export_15yrs_df)

    # --- Plotar Tendência de Volume, Valor e Preço Médio ---
    print("\nCriando gráfico de tendências de exportação de espumante...")

    fig, axes = plt.subplots(3, 1, figsize=(12, 15), sharex=True)

    # Gráfico de Volume
    axes[0].plot(export_15yrs_df.index, export_15yrs_df['Exp Espumante Total Vol'], marker='o', linestyle='-')
    axes[0].set_title('Volume Total Exportado de Espumante')
    axes[0].set_ylabel('Volume (Litros)')
    axes[0].grid(True, linestyle='--', alpha=0.6)
    axes[0].tick_params(axis='x', rotation=45)

    # Gráfico de Valor
    axes[1].plot(export_15yrs_df.index, export_15yrs_df['Exp Espumante Total Val'], marker='o', linestyle='-', color='green')
    axes[1].set_title('Valor Total Exportado de Espumante')
    axes[1].set_ylabel('Valor (USD)')
    axes[1].grid(True, linestyle='--', alpha=0.6)
    axes[1].tick_params(axis='x', rotation=45)


    # Gráfico de Preço Médio
    axes[2].plot(export_15yrs_df.index, export_15yrs_df['Preco Medio por Litro'], marker='o', linestyle='-', color='red')
    axes[2].set_title('Preço Médio por Litro Exportado de Espumante')
    axes[2].set_ylabel('Preço Médio (USD/Litro)')
    axes[2].set_xlabel('Ano')
    axes[2].grid(True, linestyle='--', alpha=0.6)
    axes[2].tick_params(axis='x', rotation=45)

    plt.tight_layout()
    plt.show()

    # --- Calcular Crescimento no Período ---
    volume_2009 = export_15yrs_df.loc[start_year, 'Exp Espumante Total Vol']
    volume_2023 = export_15yrs_df.loc[latest_year, 'Exp Espumante Total Vol']
    crescimento_volume_pct = ((volume_2023 - volume_2009) / volume_2009) * 100 if volume_2009 > 0 else float('inf')

    valor_2009 = export_15yrs_df.loc[start_year, 'Exp Espumante Total Val']
    valor_2023 = export_15yrs_df.loc[latest_year, 'Exp Espumante Total Val']
    crescimento_valor_pct = ((valor_2023 - valor_2009) / valor_2009) * 100 if valor_2009 > 0 else float('inf')

    preco_medio_2009 = export_15yrs_df.loc[start_year, 'Preco Medio por Litro']
    preco_medio_2023 = export_15yrs_df.loc[latest_year, 'Preco Medio por Litro']
    crescimento_preco_medio_pct = ((preco_medio_2023 - preco_medio_2009) / preco_medio_2009) * 100 if preco_medio_2009 > 0 else float('inf')


    print(f"\n--- Análise de Crescimento ({start_year}-{latest_year}) ---")
    print(f"Crescimento do Volume Total Exportado de Espumante: {crescimento_volume_pct:.2f}%")
    print(f"Crescimento do Valor Total Exportado de Espumante: {crescimento_valor_pct:.2f}%")
    print(f"Crescimento do Preço Médio por Litro Exportado de Espumante: {crescimento_preco_medio_pct:.2f}%")


    # --- 4. Principais Mercados Exportadores ---
    # Vamos analisar o ano mais recente com dados completos (2023)
    latest_year_data = pd.read_csv(os.path.join(base_path, file_configs['Exp Espumante Total Vol']['filename']), sep='\t')

    # Assume que as colunas relevantes para 2023 são '2023' e '2023.1'
    # Verifica se essas colunas existem antes de acessá-las
    col_vol_2023 = '2023'
    col_val_2023 = '2023.1'

    if col_vol_2023 in latest_year_data.columns and col_val_2023 in latest_year_data.columns:
        market_data_2023 = latest_year_data[['País', col_vol_2023, col_val_2023]].copy()
        market_data_2023.columns = ['País', 'Volume', 'Valor']

        # Converter para numérico, tratando erros
        market_data_2023['Volume'] = pd.to_numeric(market_data_2023['Volume'], errors='coerce').fillna(0)
        market_data_2023['Valor'] = pd.to_numeric(market_data_2023['Valor'], errors='coerce').fillna(0)

        # Remover linhas com volume zero para focar nos mercados ativos
        market_data_2023 = market_data_2023[market_data_2023['Volume'] > 0]

        # Agrupar por País (se houver dados duplicados) e somar
        market_data_2023_agg = market_data_2023.groupby('País').sum().reset_index()

        # Top 10 mercados por volume em 2023
        top_markets_vol = market_data_2023_agg.sort_values(by='Volume', ascending=False).head(10)

        print(f"\n--- Top 10 Mercados Exportadores de Espumante por Volume ({latest_year}) ---")
        print(top_markets_vol[['País', 'Volume']])

        # Plotar Top 10 Mercados por Volume
        plt.figure(figsize=(12, 7))
        sns.barplot(x='Volume', y='País', data=top_markets_vol, palette='viridis')
        plt.title(f'Top 10 Mercados Exportadores de Espumante por Volume ({latest_year})')
        plt.xlabel('Volume (Litros)')
        plt.ylabel('País')
        plt.tight_layout()
        plt.show()

        # Opcional: Top 10 mercados por Valor (pode ser interessante para investidores de valor)
        # top_markets_val = market_data_2023_agg.sort_values(by='Valor', ascending=False).head(10)
        # print(f"\n--- Top 10 Mercados Exportadores de Espumante por Valor ({latest_year}) ---")
        # print(top_markets_val[['País', 'Valor']])

    else:
         print(f"\nDados de mercado detalhados para o ano {latest_year} não encontrados ou incompletos no arquivo de Espumante.")


    # --- 5. Fatores de Sucesso (Discussão Qualitativa) ---
    print("\n--- Fatores de Sucesso e Oportunidades (Discussão) ---")
    print("- Crescimento Sustentado: A trajetória ascendente em volume e valor demonstra aceitação internacional.")
    print("- Qualidade Reconhecida: Espumantes brasileiros (especialmente da Serra Gaúcha) ganham prêmios internacionais e reconhecimento pela alta qualidade e relação custo-benefício.")
    print("- Potencial de Premiumização: O aumento no preço médio por litro sugere a entrada em segmentos de maior valor e/ou o reconhecimento da qualidade pelo mercado internacional.")
    print("- Diversificação de Mercados: Embora haja mercados chave, há potencial em novas regiões.")

    # --- 6. Oportunidades para Investimento ---
    print("\n--- Oportunidades de Investimento ---")
    print("1. Expansão nos Mercados Atuais: Aumentar a participação nos principais países compradores.")
    print("2. Entrada em Novos Mercados: Foco estratégico em regiões com demanda crescente por espumantes de qualidade/valor.")
    print("3. Premiumização: Investimento em marketing, posicionamento de marca e canais de distribuição para produtos de maior valor agregado.")
    print("4. Exportação de Vinhos Finos (Tinto/Branco/Rosado): Alavancar a reputação construída com espumantes para introduzir ou expandir a exportação de vinhos finos, um segmento atualmente sub-representado nos dados analisados, mas com grande potencial produtivo no Brasil (vide dados de processamento de viniferas).")
    print("5. Wine Tourism & Exportação: Integrar a experiência de turismo de vinho com estratégias de exportação, construindo marca e demanda no local.")
    print("6. Nichos de Mercado: Explorar tendências globais como vinhos orgânicos, sustentáveis, ou com características únicas do terroir brasileiro.")

    # --- 7. Desafios e Considerações de Risco ---
    print("\n--- Desafios e Riscos ---")
    print("- Concorrência Global: Enfrentar players estabelecidos como França, Itália e Espanha.")
    print("- Custo Logístico: A distância para grandes mercados consumidores pode impactar a competitividade de preço.")
    print("- Reconhecimento de Marca: Construir a marca 'Vinho Brasileiro' globalmente requer investimento contínuo.")
    print("- Flutuações Cambiais: Variações na taxa de câmbio real/moedas estrangeiras afetam a rentabilidade.")
    print("- Barreiras Comerciais: Tarifas e regulamentações em mercados importadores.")

    # --- 8. Conclusão: Proposição de Valor para Investidores ---
    print("\n--- Conclusão ---")
    print("As exportações de espumante demonstram uma trajetória de crescimento robusta no volume e, mais importante, no valor e preço médio por litro.")
    print("Isso valida a qualidade e o potencial de mercado dos produtos brasileiros.")
    print("O investimento neste segmento oferece a oportunidade de capitalizar sobre um sucesso existente.")
    print("Adicionalmente, há um potencial significativo e inexplorado na exportação de vinhos finos (não espumantes), representando uma via de diversificação e alto retorno com a consolidação da imagem de qualidade do vinho brasileiro no exterior.")
    print("Considerando a qualidade da produção nacional (evidenciada pelos dados de processamento de viniferas) e a crescente reputação, o momento é oportuno para investir na expansão internacional do portfólio vitivinícola brasileiro, começando pelo segmento de espumantes e planejando a entrada ou expansão no mercado de vinhos finos não espumantes.")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

# --- Configuração do Caminho ---
base_path = r'/content'
export_wine_filepath = os.path.join(base_path, 'export_limpo.csv')

# --- Carregar e Processar o arquivo export_limpo.csv ---
try:
    export_wine_df = pd.read_csv(export_wine_filepath)

    # Verificar e converter colunas numéricas
    export_wine_df['Ano'] = pd.to_numeric(export_wine_df['Ano'], errors='coerce')
    export_wine_df['Quantidade_L'] = pd.to_numeric(export_wine_df['Quantidade_L'], errors='coerce').fillna(0)
    export_wine_df['Valor_US'] = pd.to_numeric(export_wine_df['Valor_US'], errors='coerce').fillna(0)

    # Agregar por Ano para obter os totais de exportação
    export_agg_df = export_wine_df.groupby('Ano').agg(
        Total_Volume_L=('Quantidade_L', 'sum'),
        Total_Valor_US=('Valor_US', 'sum')
    ).reset_index()

    # Calcular Preço Médio por Litro (evitando divisão por zero)
    export_agg_df['Preco_Medio_US_L'] = export_agg_df['Total_Valor_US'] / export_agg_df['Total_Volume_L']
    export_agg_df['Preco_Medio_US_L'] = export_agg_df['Preco_Medio_US_L'].fillna(0) # Substitui Inf/NaN por 0

    # Filtrar para os últimos 15 anos (2009 a 2023)
    latest_year = export_agg_df['Ano'].max()
    start_year = latest_year - 14
    export_15yrs_df = export_agg_df[(export_agg_df['Ano'] >= start_year) & (export_agg_df['Ano'] <= latest_year)].copy()

    print(f"--- Dados Agregados de Exportação de Vinhos ({start_year}-{latest_year}) ---")
    print(export_15yrs_df)

    # --- Plotar Tendência de Volume, Valor e Preço Médio ---
    print("\nCriando gráfico de tendências de exportação de vinhos...")

    fig, axes = plt.subplots(3, 1, figsize=(12, 15), sharex=True)

    # Gráfico de Volume
    axes[0].plot(export_15yrs_df['Ano'], export_15yrs_df['Total_Volume_L'], marker='o', linestyle='-')
    axes[0].set_title('Volume Total Exportado de Vinhos')
    axes[0].set_ylabel('Volume (Litros)')
    axes[0].grid(True, linestyle='--', alpha=0.6)
    axes[0].tick_params(axis='x', rotation=45)
    axes[0].xaxis.set_major_locator(plt.MultipleLocator(1)) # Garante que todos os anos sejam exibidos

    # Gráfico de Valor
    axes[1].plot(export_15yrs_df['Ano'], export_15yrs_df['Total_Valor_US'], marker='o', linestyle='-', color='green')
    axes[1].set_title('Valor Total Exportado de Vinhos')
    axes[1].set_ylabel('Valor (US$)')
    axes[1].grid(True, linestyle='--', alpha=0.6)
    axes[1].tick_params(axis='x', rotation=45)
    axes[1].xaxis.set_major_locator(plt.MultipleLocator(1)) # Garante que todos os anos sejam exibidos


    # Gráfico de Preço Médio
    axes[2].plot(export_15yrs_df['Ano'], export_15yrs_df['Preco_Medio_US_L'], marker='o', linestyle='-', color='red')
    axes[2].set_title('Preço Médio por Litro Exportado de Vinhos')
    axes[2].set_ylabel('Preço Médio (US$/Litro)')
    axes[2].set_xlabel('Ano')
    axes[2].grid(True, linestyle='--', alpha=0.6)
    axes[2].tick_params(axis='x', rotation=45)
    axes[2].xaxis.set_major_locator(plt.MultipleLocator(1)) # Garante que todos os anos sejam exibidos


    plt.tight_layout()
    plt.show()

    # --- Calcular Crescimento no Período ---
    volume_2009 = export_15yrs_df[export_15yrs_df['Ano'] == start_year]['Total_Volume_L'].iloc[0] if start_year in export_15yrs_df['Ano'].values else 0
    volume_2023 = export_15yrs_df[export_15yrs_df['Ano'] == latest_year]['Total_Volume_L'].iloc[0] if latest_year in export_15yrs_df['Ano'].values else 0
    crescimento_volume_pct = ((volume_2023 - volume_2009) / volume_2009) * 100 if volume_2009 > 0 else float('inf')

    valor_2009 = export_15yrs_df[export_15yrs_df['Ano'] == start_year]['Total_Valor_US'].iloc[0] if start_year in export_15yrs_df['Ano'].values else 0
    valor_2023 = export_15yrs_df[export_15yrs_df['Ano'] == latest_year]['Total_Valor_US'].iloc[0] if latest_year in export_15yrs_df['Ano'].values else 0
    crescimento_valor_pct = ((valor_2023 - valor_2009) / valor_2009) * 100 if valor_2009 > 0 else float('inf')

    preco_medio_2009 = export_15yrs_df[export_15yrs_df['Ano'] == start_year]['Preco_Medio_US_L'].iloc[0] if start_year in export_15yrs_df['Ano'].values else 0
    preco_medio_2023 = export_15yrs_df[export_15yrs_df['Ano'] == latest_year]['Preco_Medio_US_L'].iloc[0] if latest_year in export_15yrs_df['Ano'].values else 0
    crescimento_preco_medio_pct = ((preco_medio_2023 - preco_medio_2009) / preco_medio_2009) * 100 if preco_medio_2009 > 0 else float('inf')


    print(f"\n--- Análise de Crescimento ({start_year}-{latest_year}) ---")
    print(f"Crescimento do Volume Total Exportado de Vinhos: {crescimento_volume_pct:.2f}%")
    print(f"Crescimento do Valor Total Exportado de Vinhos: {crescimento_valor_pct:.2f}%")
    print(f"Crescimento do Preço Médio por Litro Exportado de Vinhos: {crescimento_preco_medio_pct:.2f}%")

    # --- 4. Principais Mercados Exportadores ---
    # Analisar o ano mais recente com dados (2023)
    market_data_latest_year = export_wine_df[export_wine_df['Ano'] == latest_year].copy()

    # Remover linhas com volume zero para focar nos mercados ativos
    market_data_latest_year = market_data_latest_year[market_data_latest_year['Quantidade_L'] > 0]

    # Agrupar por País (se houver dados duplicados) e somar
    market_data_latest_year_agg = market_data_latest_year.groupby('País').agg(
        Total_Volume=('Quantidade_L', 'sum'),
        Total_Valor=('Valor_US', 'sum')
    ).reset_index()

    # Top 10 mercados por volume no ano mais recente
    top_markets_vol = market_data_latest_year_agg.sort_values(by='Total_Volume', ascending=False).head(10)

    print(f"\n--- Top 10 Mercados Exportadores de Vinhos por Volume ({latest_year}) ---")
    print(top_markets_vol[['País', 'Total_Volume']])

    # Plotar Top 10 Mercados por Volume
    plt.figure(figsize=(12, 7))
    sns.barplot(x='Total_Volume', y='País', data=top_markets_vol, palette='viridis')
    plt.title(f'Top 10 Mercados Exportadores de Vinhos por Volume ({latest_year})')
    plt.xlabel('Volume (Litros)')
    plt.ylabel('País')
    plt.tight_layout()
    plt.show()

    # --- 5. Fatores de Sucesso e Oportunidades (Discussão Qualitativa) ---
    print("\n--- Fatores de Sucesso e Oportunidades (Discussão) ---")
    print(f"- Crescimento: Analisar os gráficos para comentar se a trajetória em volume e valor é positiva, volátil, etc.")
    print("- Valorização do Produto: O gráfico de preço médio indica se o vinho brasileiro exportado está ganhando valor percebido no mercado internacional.")
    print("- Diversificação de Mercados: Os Top 10 mercados mostram onde o Brasil tem maior presença.")
    # Adicionar insights com base nos gráficos gerados

    # --- 6. Oportunidades para Investimento ---
    print("\n--- Oportunidades de Investimento ---")
    print("1. Expansão nos Mercados Atuais: Focar nos países que já compram e demonstram crescimento.")
    print("2. Identificação de Novos Mercados: Analisar países que não estão no Top 10, mas que talvez apresentem potencial.")
    print("3. Posicionamento: Com base no preço médio, analisar se a estratégia deve ser focar em volume (preços mais baixos) ou valor (preços mais altos).")
    print("4. Marketing e Marca: Investir em reconhecimento da marca 'Vinho Brasileiro' e de vinícolas específicas nos mercados alvo.")
    print("5. Canais de Distribuição: Melhorar a penetração e a eficiência dos canais de venda no exterior.")

    # --- 7. Desafios e Considerações de Risco ---
    print("\n--- Desafios e Riscos ---")
    print("- Concorrência Global: Mercados exportadores são altamente competitivos.")
    print("- Logística: Custos e complexidade da cadeia de suprimentos internacional.")
    print("- Barreiras Comerciais: Tarifas e regulamentações específicas de cada país.")
    print("- Flutuações Cambiais: Impacto na rentabilidade das exportações.")
    print("- Tendências de Consumo: Adaptar-se rapidamente às mudanças nas preferências dos consumidores globais.")

    # --- 8. Conclusão: Proposição de Valor para Investidores ---
    print("\n--- Conclusão ---")
    print("A análise das exportações de vinhos (mesa e finos) neste período fornece insights sobre o desempenho e potencial do Brasil no cenário global.")
    print("Com base nos gráficos e dados apresentados, é possível avaliar se há uma tendência positiva de crescimento, valorização do produto e quais mercados são mais promissores.")
    print("O investimento pode focar em capitalizar sobre o sucesso existente, explorar novos mercados ou posicionar vinhos brasileiros em segmentos de maior valor.")
    print("É fundamental considerar os desafios logísticos e de marketing para desenvolver uma estratégia de exportação bem-sucedida.")


except FileNotFoundError:
    print(f"Erro: Arquivo não encontrado em {export_wine_filepath}")
except Exception as e:
    print(f"Erro ao processar o arquivo: {e}")

print("\nProcessamento e análise concluídos.")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

base_path = r'/content'
export_wine_filepath = os.path.join(base_path, 'export_limpo.csv')

try:
    print(f"Carregando arquivo: {export_wine_filepath}")
    export_wine_df = pd.read_csv(export_wine_filepath)

    export_wine_df['Ano'] = pd.to_numeric(export_wine_df['Ano'], errors='coerce')
    export_wine_df['Quantidade_L'] = pd.to_numeric(export_wine_df['Quantidade_L'], errors='coerce').fillna(0)
    export_wine_df['Valor_US'] = pd.to_numeric(export_wine_df['Valor_US'], errors='coerce').fillna(0)

    print("Arquivo carregado e colunas convertidas.")

    export_agg_df = export_wine_df.groupby('Ano').agg(
        Total_Volume_L=('Quantidade_L', 'sum'),
        Total_Valor_US=('Valor_US', 'sum')
    ).reset_index()


    export_agg_df['Preco_Medio_US_L'] = export_agg_df['Total_Valor_US'] / export_agg_df['Total_Volume_L']
    export_agg_df['Preco_Medio_US_L'] = export_agg_df['Preco_Medio_US_L'].fillna(0)


    latest_year = export_agg_df['Ano'].max()
    start_year = latest_year - 14
    export_15yrs_detailed_df = export_wine_df[(export_wine_df['Ano'] >= start_year) & (export_wine_df['Ano'] <= latest_year)].copy()



    print(f"\nIniciando análise por país para o período {start_year}-{latest_year}...")


    country_agg_total_period = export_15yrs_detailed_df.groupby('Pais').agg(
        Total_Volume_L_Period=('Quantidade_L', 'sum'),
        Total_Valor_US_Period=('Valor_US', 'sum')
    ).reset_index()


    country_agg_total_period['Preco_Medio_US_L_Period'] = country_agg_total_period['Total_Valor_US_Period'] / country_agg_total_period['Total_Volume_L_Period']
    country_agg_total_period['Preco_Medio_US_L_Period'] = country_agg_total_period['Preco_Medio_US_L_Period'].fillna(0)


    country_agg_total_period = country_agg_total_period[country_agg_total_period['Pais'] != 'Total'].copy()


    top_10_vol_total = country_agg_total_period.sort_values(by='Total_Volume_L_Period', ascending=False).head(10)

    print(f"\n--- Top 10 Mercados Exportadores por Volume ({start_year}-{latest_year}) ---")
    print(top_10_vol_total[['Pais', 'Total_Volume_L_Period']])


    plt.figure(figsize=(12, 7))
    sns.barplot(x='Total_Volume_L_Period', y='Pais', data=top_10_vol_total, palette='viridis')
    plt.title(f'Top 10 Mercados Exportadores de Vinhos por Volume ({start_year}-{latest_year})')
    plt.xlabel('Volume Total (Litros)')
    plt.ylabel('País')
    plt.tight_layout()
    plt.show()


    top_10_val_total = country_agg_total_period.sort_values(by='Total_Valor_US_Period', ascending=False).head(10)

    print(f"\n--- Top 10 Mercados Exportadores por Valor ({start_year}-{latest_year}) ---")
    print(top_10_val_total[['Pais', 'Total_Valor_US_Period']])


    plt.figure(figsize=(12, 7))
    sns.barplot(x='Total_Valor_US_Period', y='Pais', data=top_10_val_total, palette='viridis')
    plt.title(f'Top 10 Mercados Exportadores de Vinhos por Valor ({start_year}-{latest_year})')
    plt.xlabel('Valor Total (US$)')
    plt.ylabel('País')
    plt.tight_layout()
    plt.show()


    top_countries = set(top_10_vol_total['Pais']).union(set(top_10_val_total['Pais']))


    top_countries_agg = country_agg_total_period[country_agg_total_period['Pais'].isin(top_countries)].copy()


    top_countries_agg_sorted_price = top_countries_agg.sort_values(by='Preco_Medio_US_L_Period', ascending=False)

    print(f"\n--- Preço Médio por Litro ({start_year}-{latest_year}) para Top Mercados ---")
    print(top_countries_agg_sorted_price[['Pais', 'Total_Volume_L_Period', 'Total_Valor_US_Period', 'Preco_Medio_US_L_Period']])


    plt.figure(figsize=(12, 7))
    sns.barplot(x='Preco_Medio_US_L_Period', y='Pais', data=top_countries_agg_sorted_price, palette='coolwarm')
    plt.title(f'Preço Médio por Litro de Vinhos Exportados para Top Mercados ({start_year}-{latest_year})')
    plt.xlabel('Preço Médio (US$/Litro)')
    plt.ylabel('País')
    plt.tight_layout()
    plt.show()



    selected_countries_for_trend = top_10_vol_total['Pais'].head(4).tolist()


    print(f"\n--- Evolução das Exportações de Vinhos para Países Selecionados ({start_year}-{latest_year}) ---")

    for country in selected_countries_for_trend:

        country_trend_df = export_15yrs_detailed_df[export_15yrs_detailed_df['Pais'] == country].copy()

        if not country_trend_df.empty:
            plt.figure(figsize=(10, 4))


            sns.lineplot(x='Ano', y='Quantidade_L', data=country_trend_df, marker='o', linestyle='-', label='Volume (Litros)')


            ax2 = plt.twinx()
            sns.lineplot(x='Ano', y='Valor_US', data=country_trend_df, marker='x', linestyle='--', color='green', ax=ax2, label='Valor (US$)')

            plt.title(f'Evolução da Exportação de Vinhos para {country} ({start_year}-{latest_year})')
            plt.xlabel('Ano')
            # Note: Os rótulos Y e a legenda precisam ser configurados corretamente para 2 eixos
            ax1 = plt.gca() # Obtém o eixo atual (eixo do Volume)
            ax1.set_ylabel('Volume (Litros)')
            ax2.set_ylabel('Valor (US$)')

            # Coleta as handles e labels dos dois eixos para criar uma legenda única
            handles1, labels1 = ax1.get_legend_handles_labels()
            handles2, labels2 = ax2.get_legend_handles_labels()
            ax2.legend(handles1 + handles2, labels1 + labels2, loc='upper left', bbox_to_anchor=(1.05, 1))


            plt.grid(True, linestyle='--', alpha=0.6)
            plt.xticks(country_trend_df['Ano'], rotation=45) # Garante que todos os anos sejam exibidos no eixo X
            # plt.tight_layout(rect=[0, 0, 0.85, 1]) # Ajusta o layout para dar espaço para a legenda (bbox_to_anchor já faz isso)
            plt.tight_layout()

            plt.show()
        else:
            print(f"Dados não encontrados para {country} no período {start_year}-{latest_year}.")

    print("\nAnálises comparativas por país concluídas.")

except FileNotFoundError:
    print(f"Erro: Arquivo não encontrado em {export_wine_filepath}")
except Exception as e:
    print(f"Erro ao processar o arquivo ou gerar gráficos: {e}")
    import traceback
    traceback.print_exc()