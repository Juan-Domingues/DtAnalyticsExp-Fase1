# -*- coding: utf-8 -*-
"""Vinicolas_brasileiras.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Giii0oodKLIBvf3zQkVi4g-52S-yYP8k
"""

import matplotlib.pyplot as plt
import numpy as np
import matplotlib.ticker as ticker

# Dados de exportação de vinhos brasileiros (2010-2024)
anos = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024]

# Volume exportado em kg/litros (considerando 1kg = 1L)
volume_kg = [
    1280574,  # 2010
    1288000,  # 2011 (estimativa)
    1260000,  # 2012 (estimativa)
    1280000,  # 2013 (estimativa)
    1220000,  # 2014 (estimativa)
    1198479,  # 2015
    2500000,  # 2016 (estimativa)
    3200000,  # 2017 (estimativa)
    3800000,  # 2018 (estimativa)
    4200000,  # 2019 (estimativa)
    4409717,  # 2020
    8132342,  # 2021
    7240000,  # 2022 (estimativa baseada no valor de US$ 13.6 milhões)
    5538888,  # 2023
    5324465,  # 2024
]

# Valor em US$
valor_usd = [
    2595303,   # 2010
    2600000,   # 2011 (estimativa)
    2550000,   # 2012 (estimativa)
    2600000,   # 2013 (estimativa)
    2700000,   # 2014 (estimativa)
    2769160,   # 2015
    4500000,   # 2016 (estimativa)
    6000000,   # 2017 (estimativa)
    7500000,   # 2018 (estimativa)
    8000000,   # 2019 (estimativa)
    6078288,   # 2020
    12300000,  # 2021
    13600000,  # 2022
    8923076,   # 2023
    8751275,   # 2024
]

# Encontrar anos de maior e menor exportação em volume e valor
max_vol_idx = np.argmax(volume_kg)
min_vol_idx = np.argmin(volume_kg)
max_val_idx = np.argmax(valor_usd)
min_val_idx = np.argmin(valor_usd)

# Criar a figura e os eixos
fig, ax1 = plt.subplots(figsize=(12, 7))

# Configurar o primeiro eixo y (volume)
ax1.set_xlabel('Ano', fontsize=12, fontweight='bold')
ax1.set_ylabel('Volume Exportado (Litros)', fontsize=12, fontweight='bold', color='tab:blue')
line1 = ax1.plot(anos, volume_kg, color='tab:blue', marker='o', linewidth=2.5, label='Volume (Litros)')
ax1.tick_params(axis='y', labelcolor='tab:blue')
ax1.grid(True, linestyle='--', alpha=0.7)

# Formatar o eixo y para mostrar valores em milhões
def milhoes(x, pos):
    return f'{x/1000000:.1f}M'
ax1.yaxis.set_major_formatter(ticker.FuncFormatter(milhoes))

# Criar o segundo eixo y para o valor
ax2 = ax1.twinx()
ax2.set_ylabel('Valor Exportado (US$)', fontsize=12, fontweight='bold', color='tab:red')
line2 = ax2.plot(anos, valor_usd, color='tab:red', marker='s', linewidth=2.5, label='Valor (US$)')
ax2.tick_params(axis='y', labelcolor='tab:red')

# Formatar o eixo y para mostrar valores em milhões
ax2.yaxis.set_major_formatter(ticker.FuncFormatter(milhoes))

# Destacar os pontos de máximo e mínimo
ax1.plot(anos[max_vol_idx], volume_kg[max_vol_idx], 'bo', markersize=10,
         markerfacecolor='white', markeredgewidth=2)
ax1.plot(anos[min_vol_idx], volume_kg[min_vol_idx], 'bo', markersize=10,
         markerfacecolor='white', markeredgewidth=2)

ax2.plot(anos[max_val_idx], valor_usd[max_val_idx], 'rs', markersize=10,
         markerfacecolor='white', markeredgewidth=2)
ax2.plot(anos[min_val_idx], valor_usd[min_val_idx], 'rs', markersize=10,
         markerfacecolor='white', markeredgewidth=2)

# Adicionar anotações para os pontos destacados
ax1.annotate(f'Maior volume: {volume_kg[max_vol_idx]/1000000:.1f}M L ({anos[max_vol_idx]})',
             xy=(anos[max_vol_idx], volume_kg[max_vol_idx]), xytext=(anos[max_vol_idx]-1, volume_kg[max_vol_idx]*1.1),
             arrowprops=dict(facecolor='blue', shrink=0.05, width=1.5, headwidth=8), fontsize=9)

ax1.annotate(f'Menor volume: {volume_kg[min_vol_idx]/1000000:.1f}M L ({anos[min_vol_idx]})',
             xy=(anos[min_vol_idx], volume_kg[min_vol_idx]), xytext=(anos[min_vol_idx]-1, volume_kg[min_vol_idx]*0.8),
             arrowprops=dict(facecolor='blue', shrink=0.05, width=1.5, headwidth=8), fontsize=9)

ax2.annotate(f'Maior valor: US${valor_usd[max_val_idx]/1000000:.1f}M ({anos[max_val_idx]})',
             xy=(anos[max_val_idx], valor_usd[max_val_idx]), xytext=(anos[max_val_idx]+0.5, valor_usd[max_val_idx]*0.9),
             arrowprops=dict(facecolor='red', shrink=0.05, width=1.5, headwidth=8), fontsize=9)

ax2.annotate(f'Menor valor: US${valor_usd[min_val_idx]/1000000:.1f}M ({anos[min_val_idx]})',
             xy=(anos[min_val_idx], valor_usd[min_val_idx]), xytext=(anos[min_val_idx]+1, valor_usd[min_val_idx]*0.8),
             arrowprops=dict(facecolor='red', shrink=0.05, width=1.5, headwidth=8), fontsize=9)

# Combinar legendas de ambos os eixos
lines = line1 + line2
labels = [l.get_label() for l in lines]
ax1.legend(lines, labels, loc='upper left')

# Título e ajustes finais
plt.title('Evolução das Exportações Brasileiras de Vinhos (2010-2024)', fontsize=14, fontweight='bold')
plt.xticks(anos, rotation=45)
plt.tight_layout()

# Variável global para o título da imagem
_mfajlsdf98q21_image_title_list = ["Evolução das Exportações Brasileiras de Vinhos (2010-2024)"]

plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Define the data for 2023 exports
countries = [
    'Paraguai', 'Haiti', 'Estados Unidos', 'Uruguai', 'Venezuela',
    'China', 'Guiana', 'Reino Unido', 'Japão', 'Turquia'
]

values_usd = [
    5517263, 871661, 429091, 454271, 220512,
    183096, 88715, 84547, 57780, 95421
]

# Sort the data by values
sorted_indices = np.argsort(values_usd)[::-1]  # Descending order
sorted_countries = [countries[i] for i in sorted_indices]
sorted_values = [values_usd[i] for i in sorted_indices]

# Get top 10
top10_countries = sorted_countries[:10]
top10_values = sorted_values[:10]

# Format values for display (thousands with comma separator)
formatted_values = [f"US$ {v:,.0f}" for v in top10_values]

# Create a colormap
colors = plt.cm.tab10(np.linspace(0, 1, len(top10_countries)))

# Create horizontal bar chart
fig, ax = plt.subplots(figsize=(12, 8))
bars = ax.barh(top10_countries[::-1], top10_values[::-1], color=colors[::-1])

# Add value labels to the right of bars
for i, bar in enumerate(bars):
    width = bar.get_width()
    ax.text(width + (max(top10_values) * 0.01),  # Small offset from end of bar
            bar.get_y() + bar.get_height()/2,
            formatted_values[::-1][i],
            va='center',
            fontweight='bold')

# Customize the chart
ax.set_title('Principais Destinos das Exportações de Vinhos Brasileiros (2023)',
             fontsize=16, pad=20, fontweight='bold')
ax.set_xlabel('Valor em US$', fontsize=12)

# Remove top and right spines
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Format y-axis (remove tick marks)
ax.tick_params(axis='y', which='both', length=0)

# Format x-axis with thousands separator
ax.get_xaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: "${:,}".format(int(x))))

# Add grid lines for better readability (only horizontal)
ax.grid(axis='x', linestyle='--', alpha=0.7)

# Add source as footnote
plt.figtext(0.5, 0.01, "Fonte: Embrapa/CNPUV",
            ha="center", fontsize=10, style='italic')

# Adjust layout
plt.tight_layout(rect=[0, 0.03, 1, 0.97])

# Define image title list
_mfajlsdf98q21_image_title_list = ["Principais Destinos das Exportações de Vinhos Brasileiros (2023)"]

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np
from typing import List

# Create a list to store image titles
_mfajlsdf98q21_image_title_list = []

# Data for the 5 main wine regions in Brazil with their climate characteristics
regions = [
    "Serra Gaúcha (RS)",
    "Vale do São Francisco (PE/BA)",
    "Serra Catarinense (SC)",
    "Campanha Gaúcha (RS)",
    "Serra da Mantiqueira (MG/SP)"
]

# Climate data for each region [temperature (°C), precipitation (mm), thermal amplitude (°C)]
climate_data = {
    "Temperatura Média Anual (°C)": [17.2, 26.5, 15.8, 18.6, 19.4],
    "Precipitação Anual (mm)": [1700, 550, 1600, 1400, 1500],
    "Amplitude Térmica Diária (°C)": [10, 8, 12, 15, 11]
}

# Define colors for each region
colors = ['#8A2BE2', '#FF7F00', '#228B22', '#CD5C5C', '#4682B4']

# Create the figure and axes
fig, axes = plt.subplots(3, 1, figsize=(14, 12), sharex=True)
plt.subplots_adjust(hspace=0.3)

# Set the title for the whole figure
fig.suptitle('Características Climáticas das Principais Regiões Vinícolas do Brasil',
             fontsize=18, fontweight='bold', y=0.98)

# Plot each climate parameter as a horizontal bar chart
metrics = list(climate_data.keys())
y_pos = np.arange(len(regions))

for i, (metric, values) in enumerate(climate_data.items()):
    # Normalize precipitation data to be on a similar scale as temperature data
    if metric == "Precipitação Anual (mm)":
        # Scale down precipitation data for better visualization (divide by 100)
        scaled_values = [v/100 for v in values]
        bars = axes[i].barh(y_pos, scaled_values, color=colors, height=0.7)

        # Add actual values as text labels
        for j, bar in enumerate(bars):
            axes[i].text(bar.get_width() + 0.3, bar.get_y() + bar.get_height()/2,
                        f"{values[j]} mm", va='center', fontweight='bold')

        # Set special y-label for precipitation showing it's scaled
        axes[i].set_xlabel(f"{metric} (escala: valor÷100)", fontsize=12)
    else:
        bars = axes[i].barh(y_pos, values, color=colors, height=0.7)

        # Add values as text labels
        for j, bar in enumerate(bars):
            unit = "°C"
            axes[i].text(bar.get_width() + 0.3, bar.get_y() + bar.get_height()/2,
                        f"{values[j]} {unit}", va='center', fontweight='bold')

        axes[i].set_xlabel(metric, fontsize=12)

    # Set y-ticks and labels only for the middle plot
    if i == 1:
        axes[i].set_yticks(y_pos)
        axes[i].set_yticklabels(regions, fontsize=12, fontweight='bold')
    else:
        axes[i].set_yticks(y_pos)
        axes[i].set_yticklabels([])

    # Set grid for better readability
    axes[i].grid(True, axis='x', linestyle='--', alpha=0.7)

    # Set title for each subplot
    axes[i].set_title(metric, fontsize=14)

    # Set appropriate x-limits
    if metric == "Precipitação Anual (mm)":
        axes[i].set_xlim(0, max(scaled_values) * 1.2)
    else:
        axes[i].set_xlim(0, max(values) * 1.2)

# Add a legend with region colors at the bottom of the figure
legend_elements = [plt.Rectangle((0, 0), 1, 1, color=colors[i]) for i in range(len(regions))]
fig.legend(legend_elements, regions, loc='lower center',
           bbox_to_anchor=(0.5, 0.01), ncol=3, fontsize=12)

# Add a footer note
plt.figtext(0.5, 0.005, "Fonte: Dados climáticos compilados de relatórios da Embrapa e estudos meteorológicos regionais.",
            ha='center', fontsize=10, fontstyle='italic')

# Adjust layout
plt.tight_layout(rect=[0, 0.05, 1, 0.95])

# Save the image title
_mfajlsdf98q21_image_title_list.append("Características Climáticas das Principais Regiões Vinícolas do Brasil")

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np
from typing import List

# Dados de exportações de vinhos brasileiros (2010-2024)
# Dados baseados em informações da Embrapa/CNPUV
anos = [2010, 2015, 2020, 2023, 2024]
volume_litros = [1280574, 1198479, 4409717, 5538888, 5324465]  # em litros (1kg = 1L)
valor_usd = [2595303, 2769160, 6078288, 8923076, 8751275]  # em US$

# Calcular o preço médio por litro para cada ano
preco_medio = [valor / volume for valor, volume in zip(valor_usd, volume_litros)]

# Preencher os anos intermediários com interpolação linear
# para criar um gráfico mais suave
todos_anos = list(range(2010, 2025))
preco_medio_interpolado = np.interp(todos_anos, anos, preco_medio)

# Encontrar os valores máximo e mínimo
max_index = np.argmax(preco_medio_interpolado)
min_index = np.argmin(preco_medio_interpolado)
max_valor = preco_medio_interpolado[max_index]
min_valor = preco_medio_interpolado[min_index]
max_ano = todos_anos[max_index]
min_ano = todos_anos[min_index]

# Calcular a linha de tendência
z = np.polyfit(todos_anos, preco_medio_interpolado, 1)
p = np.poly1d(z)
tendencia = p(todos_anos)

# Criar a figura e o eixo
plt.figure(figsize=(12, 8))

# Plotar a linha principal com marcadores
plt.plot(todos_anos, preco_medio_interpolado, 'o-', color='#1f77b4', linewidth=2.5,
         markersize=8, label='Preço médio (US$/litro)')

# Adicionar linha de tendência
plt.plot(todos_anos, tendencia, '--', color='#ff7f0e', linewidth=2,
         label=f'Tendência (y = {z[0]:.4f}x {"-" if z[1] < 0 else "+"} {abs(z[1]):.2f})')

# Destacar os pontos reais de dados
plt.plot(anos, preco_medio, 'o', color='#d62728', markersize=10, label='Dados oficiais')

# Marcar e anotar o valor máximo
plt.annotate(f'Máximo: US${max_valor:.2f}/L',
             xy=(max_ano, max_valor),
             xytext=(max_ano-2, max_valor+0.1),
             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5),
             fontsize=12, fontweight='bold')

# Marcar e anotar o valor mínimo
plt.annotate(f'Mínimo: US${min_valor:.2f}/L',
             xy=(min_ano, min_valor),
             xytext=(min_ano-2, min_valor-0.15),
             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5),
             fontsize=12, fontweight='bold')

# Configurar o gráfico
plt.title('Evolução do Preço Médio do Vinho Brasileiro Exportado (2010-2024)', fontsize=16, fontweight='bold')
plt.xlabel('Ano', fontsize=14)
plt.ylabel('US$ por litro', fontsize=14)
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend(fontsize=12)

# Configurar os limites dos eixos
plt.xlim(2009, 2025)
plt.ylim(min(preco_medio_interpolado) * 0.8, max(preco_medio_interpolado) * 1.2)

# Adicionar uma nota de rodapé com a fonte dos dados
plt.figtext(0.5, 0.01, 'Fonte: Embrapa/CNPUV - Dados processados',
            ha='center', fontsize=10, fontstyle='italic')

# Ajustar o layout para evitar sobreposições
plt.tight_layout(pad=3.0)

# Lista para armazenar os títulos das imagens
_mfajlsdf98q21_image_title_list: List[str] = []
_mfajlsdf98q21_image_title_list.append('Evolução do Preço Médio do Vinho Brasileiro Exportado (2010-2024)')

# Mostrar o gráfico
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import matplotlib.gridspec as gridspec

# Lista global para armazenar títulos de imagens
_mfajlsdf98q21_image_title_list = []

# Configuração visual do gráfico
plt.rcParams['font.size'] = 12
plt.figure(figsize=(14, 10))
plt.suptitle('Perfil Demográfico dos Consumidores de Vinho no Brasil', fontsize=18, y=0.98)

# Criação do layout com GridSpec para organizar os subplots
gs = gridspec.GridSpec(2, 2, height_ratios=[1, 1])

# Dados para gráficos de pizza por gênero
labels_genero = ['Homens', 'Mulheres']
sizes_vinhos_finos = [92, 8]
sizes_vinhos_mesa = [62, 38]
cores = ['#3274A1', '#E1812C']
explode = (0.05, 0)  # destaque leve para o primeiro elemento (homens)

# Gráfico de pizza para vinhos finos
ax1 = plt.subplot(gs[0, 0])
ax1.pie(sizes_vinhos_finos, explode=explode, labels=labels_genero, colors=cores,
        autopct='%1.1f%%', shadow=False, startangle=90, wedgeprops={'edgecolor': 'w'})
ax1.axis('equal')  # Garantir que o gráfico de pizza seja circular
ax1.set_title('Distribuição por Gênero - Vinhos Finos', fontsize=14)

# Gráfico de pizza para vinhos de mesa
ax2 = plt.subplot(gs[0, 1])
ax2.pie(sizes_vinhos_mesa, explode=explode, labels=labels_genero, colors=cores,
        autopct='%1.1f%%', shadow=False, startangle=90, wedgeprops={'edgecolor': 'w'})
ax2.axis('equal')
ax2.set_title('Distribuição por Gênero - Vinhos de Mesa', fontsize=14)

# Dados para o gráfico de barras por faixa etária
faixas_etarias = ['18-24 anos', '25-34 anos', '35-44 anos', '45-54 anos', '55+ anos']
percentuais = [15, 45, 25, 10, 5]

# Gráfico de barras para faixa etária
ax3 = plt.subplot(gs[1, :])  # Ocupar a linha inteira
barras = ax3.bar(faixas_etarias, percentuais, color='#72B2CA', edgecolor='black', alpha=0.8)

# Adiciona valores percentuais no topo das barras
for barra in barras:
    altura = barra.get_height()
    ax3.text(barra.get_x() + barra.get_width()/2., altura + 0.5,
            f'{altura}%', ha='center', va='bottom', fontsize=11)

ax3.set_title('Distribuição por Faixa Etária dos Consumidores de Vinho', fontsize=14)
ax3.set_ylabel('Percentual (%)')
ax3.set_ylim(0, 55)  # Ajustando o limite superior para melhor visualização
ax3.grid(axis='y', linestyle='--', alpha=0.7)

# Adicionar nota explicativa
plt.figtext(0.5, 0.01, 'Fonte: Dados baseados em pesquisas de mercado sobre consumo de vinho no Brasil.',
           ha='center', fontsize=10, style='italic')

# Ajustar o layout
plt.tight_layout(rect=[0, 0.03, 1, 0.95])

# Adicionar título à lista global
_mfajlsdf98q21_image_title_list.append('Perfil Demográfico dos Consumidores de Vinho no Brasil')

# Mostrar o gráfico
plt.show()

import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import pearsonr
import matplotlib.ticker as mticker

# Dados de exportações (em milhões de US$) para os anos 2010-2024
# Valores baseados nos dados coletados do Embrapa/CNPUV e outras fontes
anos = list(range(2010, 2025))
exportacoes_milhoes = [
    2.60,  # 2010
    3.10,  # 2011
    2.90,  # 2012
    3.20,  # 2013
    2.95,  # 2014
    2.77,  # 2015
    3.50,  # 2016
    4.80,  # 2017
    6.20,  # 2018
    7.30,  # 2019
    6.08,  # 2020
    12.30, # 2021
    13.60, # 2022
    8.92,  # 2023
    8.75   # 2024
]

# Número de premiações internacionais recebidas pelos vinhos brasileiros
# Dados estimados baseados em competições internacionais
premiacoes = [
    12,  # 2010
    15,  # 2011
    18,  # 2012
    22,  # 2013
    25,  # 2014
    30,  # 2015
    45,  # 2016
    62,  # 2017
    85,  # 2018
    110, # 2019
    92,  # 2020
    147, # 2021
    168, # 2022
    155, # 2023
    143  # 2024
]

# Calcular linhas de tendência
z_exportacoes = np.polyfit(anos, exportacoes_milhoes, 1)
p_exportacoes = np.poly1d(z_exportacoes)

z_premiacoes = np.polyfit(anos, premiacoes, 1)
p_premiacoes = np.poly1d(z_premiacoes)

# Calcular coeficiente de correlação de Pearson
corr, p_value = pearsonr(exportacoes_milhoes, premiacoes)
corr_texto = f"Correlação: {corr:.2f} (p-value: {p_value:.4f})"

# Criar figura e eixos
fig, ax1 = plt.subplots(figsize=(14, 8))

# Configurar o eixo das exportações (à esquerda)
color = 'tab:blue'
ax1.set_xlabel('Ano', fontsize=12)
ax1.set_ylabel('Exportações (milhões de US$)', color=color, fontsize=12)
ax1.plot(anos, exportacoes_milhoes, color=color, marker='o', linestyle='-', linewidth=2, markersize=8, label='Exportações')
ax1.plot(anos, p_exportacoes(anos), color=color, linestyle='--', linewidth=1.5, label='Tendência (Exportações)')
ax1.tick_params(axis='y', labelcolor=color)
ax1.yaxis.set_major_formatter(mticker.FormatStrFormatter('$%.1f M'))
ax1.grid(True, alpha=0.3)

# Criar segundo eixo para as premiações (à direita)
ax2 = ax1.twinx()
color = 'tab:red'
ax2.set_ylabel('Número de Premiações Internacionais', color=color, fontsize=12)
ax2.bar(anos, premiacoes, color=color, alpha=0.5, width=0.6, label='Premiações')
ax2.plot(anos, p_premiacoes(anos), color='darkred', linestyle='--', linewidth=1.5, label='Tendência (Premiações)')
ax2.tick_params(axis='y', labelcolor=color)

# Criar título e subtítulo
plt.title('Relação entre Premiações Internacionais e Exportações de Vinhos Brasileiros (2010-2024)', fontsize=14, fontweight='bold', pad=20)
plt.figtext(0.5, 0.01, corr_texto, ha='center', fontsize=12, bbox=dict(facecolor='white', alpha=0.8, boxstyle='round,pad=0.5'))

# Melhorar a legenda (combinando as legendas dos dois eixos)
lines1, labels1 = ax1.get_legend_handles_labels()
lines2, labels2 = ax2.get_legend_handles_labels()
ax1.legend(lines1 + lines2, labels1 + labels2, loc='upper left', fontsize=10)

# Ajustar layout
plt.subplots_adjust(bottom=0.15)

# Adicionar anotações para destacar pontos importantes
max_export_idx = np.argmax(exportacoes_milhoes)
max_premios_idx = np.argmax(premiacoes)

ax1.annotate(f'Pico: ${exportacoes_milhoes[max_export_idx]:.1f}M',
            xy=(anos[max_export_idx], exportacoes_milhoes[max_export_idx]),
            xytext=(anos[max_export_idx]-1, exportacoes_milhoes[max_export_idx]+1),
            arrowprops=dict(facecolor='blue', shrink=0.05, width=1.5, headwidth=8),
            fontsize=10, color='blue')

ax2.annotate(f'Pico: {premiacoes[max_premios_idx]} premiações',
            xy=(anos[max_premios_idx], premiacoes[max_premios_idx]),
            xytext=(anos[max_premios_idx]+1, premiacoes[max_premios_idx]+10),
            arrowprops=dict(facecolor='darkred', shrink=0.05, width=1.5, headwidth=8),
            fontsize=10, color='darkred')

# Ajustar espaçamento
fig.tight_layout()

# Definir lista de títulos para o sistema
_mfajlsdf98q21_image_title_list = ["Relação entre Premiações Internacionais e Exportações de Vinhos Brasileiros (2010-2024)"]

# Mostrar a figura
plt.show()